"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),u=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),g=a,h=d["".concat(p,".").concat(g)]||d[g]||c[g]||r;return n?o.createElement(h,i(i({ref:t},s),{},{components:n})):o.createElement(h,i({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var o=n(7462),a=(n(7294),n(3905));const r={},i="Step-By-Step Guide",l={unversionedId:"reference/guide",id:"reference/guide",title:"Step-By-Step Guide",description:"In about 15-20 minutes, let's set up an OAuth integration in your app for any external API.",source:"@site/docs/reference/guide.md",sourceDirName:"reference",slug:"/reference/guide",permalink:"/reference/guide",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/master/docs/docs/reference/guide.md",tags:[],version:"current",frontMatter:{},sidebar:"nango",previous:{title:"Quickstart",permalink:"/quickstart"},next:{title:"Other Configuration",permalink:"/reference/configuration"}},p={},u=[{value:"Step 0: Initial Configuration",id:"config",level:2},{value:"Step 1: Configure a provider",id:"step-1-configure-a-provider",level:2},{value:"Step 2: Trigger the OAuth flow (frontend)",id:"step-2-trigger-the-oauth-flow-frontend",level:2},{value:"Step 3: Retrieve tokens (backend)",id:"step-3-retrieve-tokens-backend",level:2},{value:"Node SDK",id:"node-sdk",level:3},{value:"REST API",id:"rest-api",level:3},{value:"CLI",id:"cli",level:3},{value:"Need help?",id:"need-help",level:2}],s={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"step-by-step-guide"},"Step-By-Step Guide"),(0,a.kt)("p",null,"In about ",(0,a.kt)("strong",{parentName:"p"},"15-20 minutes"),", let's set up an OAuth integration in your app for any external API."),(0,a.kt)("h2",{id:"config"},"Step 0: Initial Configuration"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"If using Nango Cloud:")),(0,a.kt)("p",null,"If you haven't, ",(0,a.kt)("a",{parentName:"p",href:"https://nango.dev/start"},"sign up")," and open the signup email you received from Nango."),(0,a.kt)("p",null,"Now let's configure the CLI for your cloud instance:",(0,a.kt)("br",{parentName:"p"}),"\n","Set two new environment variables in your ",(0,a.kt)("inlineCode",{parentName:"p"},".bashrc")," (or equivalent) by copy/pasting (\u2757\ufe0freplace ",(0,a.kt)("inlineCode",{parentName:"p"},"<SECRET-KEY>")," with the secret key you got from the signup email):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export NANGO_SECRET_KEY=<SECRET-KEY>\nexport NANGO_HOSTPORT=https://api.nango.dev\n")),(0,a.kt)("p",null,"\u2757\ufe0fDon't forget to restart your terminal to activate the new configuration."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"If running Nango locally or self-hosted:")),(0,a.kt)("p",null,"Clone and start Nango:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/NangoHQ/nango-quickstart.git && cd nango-quickstart\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up # Keep the tab open\n")),(0,a.kt)("h2",{id:"step-1-configure-a-provider"},"Step 1: Configure a provider"),(0,a.kt)("p",null,"To access an OAuth API, you need a few things from the OAuth provider/API:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Find the ",(0,a.kt)("strong",{parentName:"p"},"template name")," for the OAuth provider from the ",(0,a.kt)("a",{parentName:"p",href:"https://nango.dev/oauth-providers"},"list of pre-configured APIs")," (usually the name of the API in lowercase, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"github"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"asana"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"linkedin")," etc.)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Obtain a ",(0,a.kt)("strong",{parentName:"p"},"Client ID")," and ",(0,a.kt)("strong",{parentName:"p"},"Client Secret")," from the OAuth provider. These credentials identify your application towards the OAuth API. Check the OAuth provider's developer portal, where you registered your application with them."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"You will be asked to provide a ",(0,a.kt)("strong",{parentName:"li"},"Callback URL"),". Set it to ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:3003/oauth/callback")," if running Nango locally, or ",(0,a.kt)("inlineCode",{parentName:"li"},"https://api.nango.dev/oauth/callback")," if you are using Nango Cloud."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Look up the ",(0,a.kt)("strong",{parentName:"p"},"scopes")," (aka permissions) you want to request from users. Scopes are specific to individual OAuth providers, so you should look them up in the OAuth provider's API documentation.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Finally, decide on a ",(0,a.kt)("strong",{parentName:"p"},"unique key")," for your provider configuration. If you only have one configuration per API provider, we recommend you use the API's name in all lowercase, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"github")," for GitHub, ",(0,a.kt)("inlineCode",{parentName:"p"},"salesforce")," for Salesforce etc."))),(0,a.kt)("p",null,"With this information you are now ready to configure & enable your first OAuth provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'npx nango config:create <CONFIG-KEY-FROM-4> <TEMPLATE-NAME-FROM-1> <CLIENT-ID-FROM-2> <CLIENT-SECRET-FROM-2> "<SCOPES-FROM-2>"\n# e.g. for github: npx nango config:create github github <GITHUB-APP-ID> <GITHUB-APP-SECRET> "comma,separated,scopes,with,quotes"\n')),(0,a.kt)("p",null,"Now run ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nango config:list")," and you should see your freshly added config \ud83c\udf89"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nango")," to display all available CLI commands + help.")),(0,a.kt)("h2",{id:"step-2-trigger-the-oauth-flow-frontend"},"Step 2: Trigger the OAuth flow (frontend)"),(0,a.kt)("p",null,"In your frontend code, import the Nango frontend SDK:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import Nango from 'https://unpkg.com/@nangohq/frontend/dist/index.js'; // For quick testing\n// or\nimport Nango from '@nangohq/frontend'; // After installing the npm package\n")),(0,a.kt)("p",null,"Trigger a user OAuth flow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"var nango = new Nango({ host: 'http://localhost:3003' }); // Local\n// or\nvar nango = new Nango({ publicKey: '<PUBLIC-KEY-FROM-SIGNUP-EMAIL>' }); // Nango Cloud\n\n// Trigger an OAuth flow\n// Param 1: unique config key from Step 1 (bullet 4)\n// Param 2: ID you will use to retrieve the connection (most often the user ID)\nnango\n    .auth('<CONFIG-KEY>', '<CONNECTION-ID>')\n    .then((result) => {\n        console.log(`OAuth flow succeeded for provider \"${result.providerConfigKey}\" and connection-id \"${result.connectionId}\"!`);\n    })\n    .catch((error) => {\n        console.error(`There was an error in the OAuth flow for integration: ${error.message}`);\n    });\n")),(0,a.kt)("p",null,"With the frontend part ready, you should now be able to run a full OAuth flow from your app while Nango will retrieve, store and refresh tokens automatically. Go ahead & try it! \ud83d\ude4c"),(0,a.kt)("h2",{id:"step-3-retrieve-tokens-backend"},"Step 3: Retrieve tokens (backend)"),(0,a.kt)("p",null,"The last step is to retrieve fresh access tokens whenever you need to make authenticated API requests on behalf of users."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Many OAuth providers provide short-lived access tokens (30-60 minutes). Nango refreshes them automatically for you, but it is important you always request the access token right before each API call. Otherwise you may work with a stale token that has been revoked and your API call will fail.")),(0,a.kt)("p",null,"Nango offers a couple ways to retrieve fresh access tokens:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Backend SDKs"),": easiest way if an SDK is available for your language (currently only Node, others coming soon)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"REST API"),": equivalent fallback option if no SDK is available for your language"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"CLI"),": convenient for testing & development")),(0,a.kt)("p",null,"In all cases, you need to tell Nango two things to get the access token:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"Provider Config Key"),", which identifies the OAuth provider configuration (from Step 1, bullet 4)"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"Connection ID"),", which identifies the connection containing the access token (from Step 3)")),(0,a.kt)("h3",{id:"node-sdk"},"Node SDK"),(0,a.kt)("p",null,"Install the SDK with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S @nangohq/node\n")),(0,a.kt)("p",null,"Retrieve access tokens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node';\n\nlet nango = new Nango({ host: 'http://localhost:3003' }); // Local\n// or\nlet nango = new Nango({ secretKey: '<SECRET-KEY-FROM-SIGNUP-EMAIL>' }); // Nango Cloud\n\nlet accessToken = await nango.getToken('<CONFIG-KEY>', '<CONNECTION-ID>');\n")),(0,a.kt)("p",null,"If using Nango Cloud, you should store the secret in an an environment variable on your backend, to avoid committing it."),(0,a.kt)("h3",{id:"rest-api"},"REST API"),(0,a.kt)("p",null,"Your can test the Nango API endpoint to retrieve connections & tokens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Local\ncurl 'http://localhost:3003/connection/<CONNECTION-ID>?provider_config_key=<CONFIG-KEY>'\n\n# Nango Cloud\ncurl 'https://api.nango.dev/connection/<CONNECTION-ID>?provider_config_key=<CONFIG-KEY>' -H 'Authorization: Bearer <SECRET-KEY-FROM-SIGNUP-EMAIL>'\n")),(0,a.kt)("h3",{id:"cli"},"CLI"),(0,a.kt)("p",null,"For development convenience, use the CLI to retrieve connections and tokens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx nango token:get <CONFIG-KEY> <CONNECTION-ID>\n")),(0,a.kt)("h2",{id:"need-help"},"Need help?"),(0,a.kt)("p",null,"If you run into any trouble whilst setting up Nango or have any questions please do not hesitate to contact us - we are happy to help!"),(0,a.kt)("p",null,"Please join our ",(0,a.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community"),", where we are very active, and we will do our best to help you fast."))}c.isMDXComponent=!0}}]);