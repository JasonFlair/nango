"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9766],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),h=r,g=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>h});var a=t(7462),r=t(7294),o=t(6010),s=t(2389),i=t(7392),l=t(7094),u=t(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var n;const{lazy:t,block:s,defaultValue:d,values:h,groupId:g,className:y}=e,m=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=h??m.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,i.l)(f,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(n=m.find((e=>e.props.default)))?void 0:n.props.value)??m[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:_,setTabGroupChoices:k}=(0,l.U)(),[w,x]=(0,r.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:P}=(0,u.o5)();if(null!=g){const e=_[g];null!=e&&e!==w&&f.some((n=>n.value===e))&&x(e)}const N=e=>{const n=e.currentTarget,t=T.indexOf(n),a=f[t].value;a!==w&&(P(n),x(a),null!=g&&k(g,String(a)))},S=e=>{var n;let t=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},y)},f.map((e=>{let{value:n,label:t,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>T.push(e),onKeyDown:S,onClick:N},s,{className:(0,o.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":w===n})}),t??n)}))),t?(0,r.cloneElement)(m.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function h(e){const n=(0,s.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},5455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),o=t(5488),s=t(5162);const i={},l="Create Syncs",u={unversionedId:"nango-sync/use-nango/sync-all-options",id:"nango-sync/use-nango/sync-all-options",title:"Create Syncs",description:"Adding a Sync to Nango is quick & easy. If you have not read the core concepts yet please do so first: From here on out we assume you are familiar with Syncs and how they work together with your application.",source:"@site/docs/nango-sync/use-nango/sync-all-options.md",sourceDirName:"nango-sync/use-nango",slug:"/nango-sync/use-nango/sync-all-options",permalink:"/nango-sync/use-nango/sync-all-options",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/master/docs/docs/nango-sync/use-nango/sync-all-options.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Core concepts",permalink:"/nango-sync/use-nango/core-concepts"},next:{title:"Modes",permalink:"/nango-sync/use-nango/sync-modes"}},c={},p=[{value:"3 quick steps to add a new Sync",id:"3-quick-steps-to-add-a-new-sync",level:2},{value:"Sync options",id:"sync-options",level:2},{value:"Problems with your Sync? We are here to help!",id:"problems-with-your-sync-we-are-here-to-help",level:2}],d={toc:p};function h(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-syncs"},"Create Syncs"),(0,r.kt)("p",null,"Adding a Sync to Nango is quick & easy. If you have not read the ",(0,r.kt)("a",{parentName:"p",href:"/nango-sync/use-nango/core-concepts"},"core concepts")," yet please do so first: From here on out we assume you are familiar with Syncs and how they work together with your application."),(0,r.kt)("h2",{id:"3-quick-steps-to-add-a-new-sync"},"3 quick steps to add a new Sync"),(0,r.kt)("p",null,"We recommend the following steps when you add a new Sync to Nango:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Make sure the API request works as expected (using Postman, a script, CLI etc.)"),(0,r.kt)("li",{parentName:"ol"},"Look at the Sync options below and configure them for your Sync"),(0,r.kt)("li",{parentName:"ol"},"Run your code once and make sure Nango syncs your data as expected")),(0,r.kt)("h2",{id:"sync-options"},"Sync options"),(0,r.kt)("p",null,"This example shows you all the possible configuration options for a Nango Sync. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"All configuration fields are optional")," (though you may need to provide the relevant ones for the external API request to succeed). "),(0,r.kt)("p",null,"If you want to see some examples of them in action take a look at the ",(0,r.kt)("a",{parentName:"p",href:"/nango-sync/real-world-examples"},"real world examples")," page."),(0,r.kt)("p",null,"For all the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," parameters you can use ",(0,r.kt)("inlineCode",{parentName:"p"},".")," characters to reference keys in nested objects: ",(0,r.kt)("inlineCode",{parentName:"p"},"paging.next.after")),(0,r.kt)(o.Z,{groupId:"programming-language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"node",label:"Node SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {Nango, NangoHttpMethod} from '@nangohq/node-client'\n\nlet config = {\n    //==================\n    // Config for the HTTP request to the 3rd party API\n    //==================\n    method: NangoHttpMethod.Get,    // The HTTP method of the external REST API endpoint (GET, POST, etc.). Default: GET.\n    headers: {                      // HTTP headers to send along with every request to the external API (e.g. auth header).\n        'Accept': 'application/json'\n    },\n    body: {                         // HTTP body to send along with every request to the external API.\n        'mykey': 'A great value'\n    },\n    query_params: {\n        'mykey': 'A great value'    // URL query params to send along with every request to the external API.\n    },\n\n    //==================\n    // Fetching records & uniquely identifying them\n    //==================\n    response_path: 'data.results',  // The path to the result objects inside the external API response.\n    unique_key: 'profile.email',    // The key in the result objects used for deduping (e.g. email, id) + enables Upsert syncing mode.\n    metadata: {                     // Will be attached to every synced record. 1 column per key.\n        user_id: 123,\n        company: 'supercorp'\n    }\n\n    //==================\n    // Deletion modes\n    //==================\n    soft_delete: false,             // Defaults to false. Soft Delete Mode will keep deleted records in the db and add the deletion date in a 'deleted_at' column.\n\n    //==================\n    // Pagination\n    //==================\n\n    // Pagination strategy 1: Next page cursor in response metadata\n    paging_cursor_request_path: 'after',   // Provide the cursor request path for fetching the next page.\n    paging_cursor_metadata_response_path: 'paging.next.after',   // Use a field in the response as cursor for the next page.\n\n    // Pagination strategy 2: Next page cursor in response's last object\n    paging_cursor_request_path: 'after',   // Provide the cursor request path for fetching the next page.\n    paging_cursor_object_response_path: 'id', // Use a field of the response's last object as cursor for the next page.\n\n    // Pagination strategy 3: Next page URL in response body\n    paging_url_path: 'next',        // Use a field in the response as URL for the next page.\n\n    // Pagination strategy 4: Next page URL in response header\n    paging_header_link_rel: 'next', // Use the Link Header to fetch the next page.\n\n    //==================\n    // JSON-to-SQL schema mapping (for details see \"Schema mappings\" in the sidebar)\n    //==================\n    auto_mapping: true,             // Automatically map JSON objects returned from external APIs to SQL columns. Default: true.\n    mapped_table: 'example_table'   // The name of the table in the database where the results should be stored.\n\n    //==================\n    // Sync frequency\n    //==================\n    cron: \"* * * * *\",              // Run Sync jobs on a cron schedule.\n    frequency: \"1 hour\",            // Alternatively, run Sync jobs with an unaligned frequency, using natural language.\n\n    //==================\n    // Authentication (only needed for OAuth, leverages Nango)\n    //==================\n    nango_connection_id: \"user1\",  // The ID of the connection registered with Nango\n    nango_provider_config_key: \"hubspot\",  // The key of the provider configuration registered with Nango\n    \n    //==================\n    // Convenience features\n    //==================\n    max_total: 100,                 // Limit the total number of total objects synced for testing purposes.\n    friendly_name: 'My Sync',       // Human readable name, will be used in logs & observability.\n};\n\n// Add the Sync\nnew Nango().sync('https://api.example.com/my/endpoint?query=A+query', config);\n"))),(0,r.kt)(s.Z,{value:"curl",label:"REST API (curl)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl --request POST \\\n--url http://localhost:3003/v1/syncs \\\n--header "Content-type: application/json" \\\n--data \'{\n  "url": "https://api.example.com/my/endpoint?query=A+query",\n  "method": "GET",\n  "headers": { "Accept": "application/json"},\n  "body": { "mykey": "A great value"},\n  "query_params": { "mykey": "A great value"},\n  "response_path": "data.results",\n  "unique_key": "profile.email",\n  "paging_cursor_request_path": "after",\n  "paging_cursor_metadata_response_path": "next",\n  "paging_url_path": "next",\n  "paging_cursor_object_response_path": "id",\n  "paging_header_link_rel": "next",\n  "auto_mapping": true,\n  "frequency": 15,\n  "nango_connection_id": "user1",\n  "nango_provider_config_key": "hubspot",\n  "max_total": 100,\n  "friendly_name": "My Sync",\n  "metadata": { "company_id": 123 }\n}\'\n\n#==================\n# Config for the HTTP request to the 3rd party API\n#==================\n#\n# - url: The URL of the external API endpoint\n# - method: The HTTP method of the external REST API endpoint (GET, POST, etc.). Default: GET.\n# - headers: HTTP headers to send along with every request to the external API (e.g. auth header).\n# - body: HTTP body to send along with every request to the external API.\n# - query_params: URL query params to send along with every request to the external API.\n#\n#==================\n# Fetching records & uniquely identifying them\n#==================\n#\n# - response_path: The path to the result objects inside the external API response.\n# - unique_key: The key in the result objects used for deduping (e.g. email, id) + enables Full Refresh + Upsert syncing mode.\n# - metadata: Will be attached to every synced record. 1 column per key.\n#\n#==================\n# Pagination\n#==================\n#\n# Pagination strategy 1: Next page cursor in response metadata\n# - paging_cursor_request_path: Provide the cursor request path for fetching the next page.\n# - paging_cursor_metadata_response_path: Use a field in the response as cursor for the next page.\n# \n# Pagination strategy 2: Next page cursor in response\'s last object\n# - paging_cursor_request_path: Provide the cursor request path for fetching the next page.\n# - paging_cursor_object_response_path: Use a field of the response\'s last object as cursor for the next page.\n#\n# Pagination strategy 3: Next page URL in response body\n# - paging_url_path: Use a field in the response as URL for the next page.\n#\n# Pagination strategy 4: Next page URL in response header\n# - paging_header_link_rel: Use the Link Header to fetch the next page.\n#\n#==================\n# JSON-to-SQL schema mapping (for details see "Schema mappings" in the sidebar)\n#==================\n#\n# - auto_mapping: Automatically map JSON objects returned from external APIs to SQL columns. Default: true.\n# - mapped_table: The name of the table in the database where the results should be stored.\n#\n#==================\n# Sync frequency\n#==================\n#\n# - frequency: Sync interval in minutes. Default: 60\n#\n#==================\n# Authentication (only needed for OAuth, leverages Nango)\n#==================\n#\n# - nango_connection_id: The ID of the connection registered with Nango\n# - nango_provider_config_key: The key of the provider configuration registered with Nango\n#\n#==================\n# Convenience features\n#==================\n#\n# - max_total: Limit the total number of total objects synced for testing purposes.\n# - friendly_name: Human readable name, will be used in logs & observability.\n#\n\n')))),(0,r.kt)("h2",{id:"problems-with-your-sync-we-are-here-to-help"},"Problems with your Sync? We are here to help!"),(0,r.kt)("p",null,"If you need help or run into issues, please reach out! We are online and responsive all day on the ",(0,r.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack Community"),"."))}h.isMDXComponent=!0}}]);