"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=d(n),u=i,f=p["".concat(s,".").concat(u)]||p[u]||l[u]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const o={},a="Comment Model (Unified Ticketing API)",c={unversionedId:"nango-unified-apis/ticketing/comments",id:"nango-unified-apis/ticketing/comments",title:"Comment Model (Unified Ticketing API)",description:"The Comment model has the following fields:",source:"@site/docs/nango-unified-apis/ticketing/comments.md",sourceDirName:"nango-unified-apis/ticketing",slug:"/nango-unified-apis/ticketing/comments",permalink:"/nango-unified-apis/ticketing/comments",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/master/docs/docs/nango-unified-apis/ticketing/comments.md",tags:[],version:"current",frontMatter:{},sidebar:"nango",previous:{title:"Ticket Model (Unified Ticketing API)",permalink:"/nango-unified-apis/ticketing/tickets"},next:{title:"Proxy",permalink:"/nango-unified-apis/proxy"}},s={},d=[],m={toc:d};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"comment-model-unified-ticketing-api"},"Comment Model (Unified Ticketing API)"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Comment")," model has the following fields:"),(0,i.kt)("admonition",{title:"This model can be customized",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Unified models in Nango can be extended and customized. This lets you define your own mapping from the fields of the external APIs to exactly the data model that you want.\nPing us on the ",(0,i.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community")," and we are happy to show you how it works.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "08d15f69-6403-4bef-9307-b96c12e44728", // Nango assigned unique ID of this object\n    "external_id": "362382939", // The comment\'s id in the external system\n\n    "ticket_id": "08d15f69-6403-4bef-9307-b96c12e44595", // The Nango ID of the ticket this comment belongs to\n\n    "description": "This is a great idea!\\n\\n I can help with...", // The description/body of the comment. In HTML format if supported by the external API\n\n    "creator": "Juck Norris", // The name of the user who created the comment (if returned by the external API)\n    "external_created_at": "2023-05-01T00:00:00Z", // Timestamp when the comment was created (as returned by the external API)\n    "external_updated_at": "2023-05-03T00:00:00Z", // Timestamp when the comment was last updated (as returned by the external API)\n\n    "first_seen_at": "2023-05-03T00:00:00Z", // Timestamp when Nango first saw this comment\n    "last_updated_at": "2023-05-03T00:00:00Z", // Timestamp when Nango last updated this comment\n    "deleted_at": "2023-05-04T00:00:00Z", // The timestamp when Nango detected that this object had been deleted in the external system. null if not deleted.\n\n    "external_raw_data": [  // List of raw API responses from the external API which Nango used to create the unified model\n        {\n            ...\n        }\n    ]\n}\n')))}l.isMDXComponent=!0}}]);