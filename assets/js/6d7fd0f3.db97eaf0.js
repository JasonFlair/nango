"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,g=h["".concat(s,".").concat(d)]||h[d]||c[d]||a;return n?o.createElement(g,i(i({ref:t},u),{},{components:n})):o.createElement(g,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={},i="Step-by-step guide",l={unversionedId:"reference/guide",id:"reference/guide",title:"Step-by-step guide",description:"This setup will take about 15-20 minutes.",source:"@site/docs/reference/guide.md",sourceDirName:"reference",slug:"/reference/guide",permalink:"/reference/guide",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/main/docs/docs/reference/guide.md",tags:[],version:"current",frontMatter:{},sidebar:"nango",previous:{title:"Quickstart",permalink:"/quickstart"},next:{title:"CLI",permalink:"/reference/cli"}},s={},p=[{value:"Step 1: Start the Nango server",id:"step-1-start-the-nango-server",level:2},{value:"Step 2: Configure a provider (CLI)",id:"step-2-configure-a-provider-cli",level:2},{value:"Step 3: Trigger the OAuth flow (frontend)",id:"step-3-trigger-the-oauth-flow-frontend",level:2},{value:"Step 4: Retrieve tokens (backend)",id:"step-4-retrieve-tokens-backend",level:2},{value:"Node SDK",id:"node-sdk",level:3},{value:"Getting an access token - REST API",id:"rest-api",level:3},{value:"Need help?",id:"need-help",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"step-by-step-guide"},"Step-by-step guide"),(0,r.kt)("p",null,"This setup will take about ",(0,r.kt)("strong",{parentName:"p"},"15-20 minutes"),"."),(0,r.kt)("h2",{id:"step-1-start-the-nango-server"},"Step 1: Start the Nango server"),(0,r.kt)("p",null,"The first step is to start the Nango server locally or use ",(0,r.kt)("a",{parentName:"p",href:"/cloud"},"Nango Cloud"),"."),(0,r.kt)("p",null,"For this guide we will stick to a local deployment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/NangoHQ/nango.git && cd nango \ndocker compose up\n")),(0,r.kt)("h2",{id:"step-2-configure-a-provider-cli"},"Step 2: Configure a provider (CLI)"),(0,r.kt)("p",null,"To run OAuth flows from your application you need to setup each provider that you want to use. For this you will need a few things from the OAuth provider/API:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First ",(0,r.kt)("strong",{parentName:"li"},"find the template name")," for the API you are looking to integrate with from our ",(0,r.kt)("a",{parentName:"li",href:"https://nango.dev/oauth-providers"},"list of pre-configured APIs"),". Usually this is the name of the API in lowercase, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"github"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"asana"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"linkedin")," etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client id")," and ",(0,r.kt)("strong",{parentName:"li"},"client secret"),", these identify your application towards the API that offers the OAuth. You need to get these from the API/OAuth provider. Usually you will find them in their developer portal."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"scopes")," you want to request from the user: These will also depend on the API, you can usually find a list of all scopes an API offers in the API documentation.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For the CLI commend below your scopes must be comma separated, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"read,write")," (no matter what format the API expects)"))),(0,r.kt)("li",{parentName:"ul"},"The OAuth provider should ask you for a callback URL. For Nango the callback URL is always ",(0,r.kt)("inlineCode",{parentName:"li"},"[NANGO_SERVER_URL]/oauth/callback"),", so if Nango runs on your local machine the callback URL is ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:3003/oauth/callback")),(0,r.kt)("li",{parentName:"ul"},"Finally, you need to decide on a ",(0,r.kt)("strong",{parentName:"li"},"provider config key"),". This key will uniquely identify your configuration within Nango. If you only have one configuration per API provider we recommend you use the API's name in all lowercase, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"github")," for GitHub, ",(0,r.kt)("inlineCode",{parentName:"li"},"salesforce")," for Salesforce etc.")),(0,r.kt)("p",null,"With this information you are now ready to configure & enable your first OAuth provider. Here we setup a GitHub config as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx nango config:create github github <client-id> <client-secret> "<scopes>"\n')),(0,r.kt)("p",null,"Now run ",(0,r.kt)("inlineCode",{parentName:"p"},"npx nango config:list")," and you should see your freshly added config \ud83c\udf89"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npx nango")," to show the CLI help menu")),(0,r.kt)("h2",{id:"step-3-trigger-the-oauth-flow-frontend"},"Step 3: Trigger the OAuth flow (frontend)"),(0,r.kt)("p",null,"For quick testing you can call Nango directly from within a ",(0,r.kt)("inlineCode",{parentName:"p"},"<script>")," tag on your page: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<script type=\"module\">\n    import Nango from 'https://unpkg.com/@nangohq/frontend/dist/index.js';\n\n    var nango = new Nango('http://localhost:3003');\n    //... see below\n<\/script>\n")),(0,r.kt)("p",null,"For single page apps where you bundle your Javascript/Typescript files we recommend you install the ",(0,r.kt)("inlineCode",{parentName:"p"},"@nangohq/frontend")," package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import Nango from '@nangohq/frontend';\n")),(0,r.kt)("p",null,"Trigger a user OAuth flow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"var nango = new Nango('http://localhost:3003'); // or whatever host/port of your Nango server\n\n// Trigger an OAuth flow\n// The first parameter is the config key you set up in step 2\n// The second parameter is the ID you will use to retrieve the connection (most often the user ID)\nnango.auth('github', '<connection-id>')\n.then((result) => { \n    console.log(`OAuth flow succeeded for provider \"${result.providerConfigKey}\" and connection-id \"${result.connectionId}\"!`);\n})\n.catch((error) => {\n    console.error(`There was an error in the OAuth flow for integration: ${error.message}`);\n});\n")),(0,r.kt)("p",null,"With the frontend part setup you should now be able to run a full OAuth flow from your app. Go ahead & try it! \ud83d\ude4c"),(0,r.kt)("h2",{id:"step-4-retrieve-tokens-backend"},"Step 4: Retrieve tokens (backend)"),(0,r.kt)("p",null,"The last step is to get a fresh access token in your backend whenever you need to make an authenticated API request for the user."),(0,r.kt)("p",null,"Why fresh?",(0,r.kt)("br",{parentName:"p"}),"\n","Increasingly OAuth providers are providing access tokens with a limited lifetime of e.g. 30-60 minutes. After this time the token expires and needs to be exchanged for a fresh token. Nango handles this exchange transparently for you, but it is important you always request the access token just prior to each API call. Otherwise you may work with a stale token that has been revoked and your API call will fail."),(0,r.kt)("p",null,"Nango offers two ways to get a fresh access token:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"With a ",(0,r.kt)("strong",{parentName:"li"},"backend SDK"),": This is the easiest and preferred way if an SDK is available for your language (currently only Node, others coming soon)."),(0,r.kt)("li",{parentName:"ul"},"With a ",(0,r.kt)("strong",{parentName:"li"},"REST API"),": This is the fallback option if no SDK is available for your language.")),(0,r.kt)("p",null,"In both cases you need to tell Nango two things to get the access token:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"provider config key"),", which identifies the OAuth provider configuration"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"connection ID"),", which identifies the connection containing the access token")),(0,r.kt)("h3",{id:"node-sdk"},"Node SDK"),(0,r.kt)("p",null,"Install the SDK with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S @nangohq/node\n")),(0,r.kt)("p",null,"Retrieve access tokens:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nango } from '@nangohq/node'\n\nlet nango = new Nango('http://localhost:3003'); // or whatever host/port of your Nango server\n\nlet accessToken = await nango.getToken('<config-key>', '<connection-id>');\n")),(0,r.kt)("h3",{id:"rest-api"},"Getting an access token - REST API"),(0,r.kt)("p",null,"The api endpoint is located at ",(0,r.kt)("inlineCode",{parentName:"p"},"[NANGO_SERVER_URL]/connection/<connection-id>?provider_config_key=<config-key>"),".  "),(0,r.kt)("p",null,"Here is an example curl command for Nango running on your local machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XGET -H \"Content-type: application/json\" \\\n'http://localhost:3003/connection/<connection-id>?provider_config_key=<config-key>'\n")),(0,r.kt)("h2",{id:"need-help"},"Need help?"),(0,r.kt)("p",null,"If you run into any trouble whilst setting up Nango or have any questions please do not hesitate to contact us -  we are happy to help!"),(0,r.kt)("p",null,"Please join our ",(0,r.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community"),", where we are very active, and we will do our best to help you fast."))}c.isMDXComponent=!0}}]);