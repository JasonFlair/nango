"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[486],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>c});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),s=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(r),c=n,m=h["".concat(p,".").concat(c)]||h[c]||d[c]||a;return r?o.createElement(m,i(i({ref:t},u),{},{components:r})):o.createElement(m,i({ref:t},u))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5494:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_label:"Contribute a New Provider"},i="Contribute a New Provider",l={unversionedId:"contribute-api",id:"contribute-api",title:"Contribute a New Provider",description:"Adding support for a new provider to Nango is fast & easy. Please follow the steps below and we will be happy to accept your PR!",source:"@site/docs/contribute-api.md",sourceDirName:".",slug:"/contribute-api",permalink:"/contribute-api",draft:!1,editUrl:"https://github.com/nangohq/nango/tree/master/docs/docs/contribute-api.md",tags:[],version:"current",frontMatter:{sidebar_label:"Contribute a New Provider"},sidebar:"nango",previous:{title:"Deploy Nango to Render",permalink:"/nango-deploy/render"}},p={},s=[{value:"Step 0: A quick overview of how provider templates work in Nango",id:"step-0-a-quick-overview-of-how-provider-templates-work-in-nango",level:2},{value:"Step 1: Add your new provider to <code>providers.yaml</code>",id:"step-1-add-your-new-provider-to-providersyaml",level:2},{value:"Step 2: Test your new provider",id:"step-2-test-your-new-provider",level:2},{value:"Step 3: Submit your PR",id:"step-3-submit-your-pr",level:2},{value:"Where to get help",id:"where-to-get-help",level:2}],u={toc:s};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"contribute-a-new-provider"},"Contribute a New Provider"),(0,n.kt)("p",null,"Adding support for a new provider to Nango is fast & easy. Please follow the steps below and we will be happy to accept your PR!"),(0,n.kt)("p",null,"If you find a bug with one of the existing providers feel free to use these steps to submit a PR with a fix. Thank you!"),(0,n.kt)("h2",{id:"step-0-a-quick-overview-of-how-provider-templates-work-in-nango"},"Step 0: A quick overview of how provider templates work in Nango"),(0,n.kt)("p",null,"Support for the OAuth flow of different providers in Nango is implemented with templates: A small config that tells Nango how to perform the OAuth flow for the specific provider."),(0,n.kt)("p",null,"All templates of Nango live in a single file called ",(0,n.kt)("a",{parentName:"p",href:"https://nango.dev/oauth-providers"},"providers.yaml")," in the server package. ",(0,n.kt)("a",{parentName:"p",href:"https://yaml.org/"},"More about YAML here"),"."),(0,n.kt)("p",null,"Most templates only need to make use of 2-3 configuration keys, but in some cases you might need more.\nFor a full list of configuration options please check the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/NangoHQ/Nango/blob/master/packages/auth/lib/models.ts"},"type definitions here"),"."),(0,n.kt)("p",null,"The most commonly used configuration options are:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# All keys & slugs use lowercase and snake_case\nprovider_slug: # Shorthand for the provider, ideally the provider's name. Must be unique.\n    # Mandatory fields\n    auth_mode: OAUTH2 # Either OAUTH1 (for OAuth 1.0a) or OAUTH2\n    authorization_url: https://gitlab.com/oauth/authorize # The URL of the authorization page for the OAuth service\n    token_url: https://gitlab.com/oauth/token # The URL for the token request\n\n    # Optional fields\n    authorization_params: # Additional parameters to pass along in the authorization step\n        response_type: code\n    token_params: # Additional parameters to pass along in the token request\n        mycoolparam: value\n    refresh_url: https://api.example.com/oauth/refresh # The URL to use for refreshing the access token, if different from token_url\n    scope_separator: ',' # String to use to separate scopes. Defaults to ' ' (1 space) if not provided\n")),(0,n.kt)("p",null,"Templates support ",(0,n.kt)("a",{parentName:"p",href:"/reference/configuration#connection-config"},"string interpolation for dynamic URLs"),"."),(0,n.kt)("h2",{id:"step-1-add-your-new-provider-to-providersyaml"},"Step 1: Add your new provider to ",(0,n.kt)("inlineCode",{parentName:"h2"},"providers.yaml")),(0,n.kt)("p",null,"Fork the repo and edit the ",(0,n.kt)("inlineCode",{parentName:"p"},"packages/auth/providers.yaml")," file as explained above to add support for the new provider. The API documentation should contain all the details you need on the OAuth flow to complete this step."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"We are here")," if you need help with this."),(0,n.kt)("h2",{id:"step-2-test-your-new-provider"},"Step 2: Test your new provider"),(0,n.kt)("p",null,"To test your new provider:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Add a provider config for the new provider with the CLI (see ",(0,n.kt)("a",{parentName:"li",href:"/quickstart"},"Quickstart")," if needed)"),(0,n.kt)("li",{parentName:"ol"},"Start Nango locally (see below)"),(0,n.kt)("li",{parentName:"ol"},"Use the built-in test page to trigger an OAuth flow of your new provider. For this CD to ",(0,n.kt)("inlineCode",{parentName:"li"},"packages/frontend")," and run a local Python web server with ",(0,n.kt)("inlineCode",{parentName:"li"},"python3 -m http.server 8000"),". You can now access the test page at ",(0,n.kt)("a",{parentName:"li",href:"http://localhost:8000/bin/sample.html"},"http://localhost:8000/bin/sample.html"),"."),(0,n.kt)("li",{parentName:"ol"},"Run a full OAuth dance and make sure it works as expected")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"To run Nango locally follow these steps:")),(0,n.kt)("p",null,"You need the latest stable node version as well as a recent version of npm (or npm compatible package manager) installed on your machine."),(0,n.kt)("p",null,"In the root of the repo run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm i\nnpm run ts-build\n")),(0,n.kt)("p",null,"Then start the Postgresql docker container. The easiest way to do this is to run docker compose and then stop the Nango server (but keep the DB running):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up\n")),(0,n.kt)("p",null,"Then stop the Nango server and keep the postgres container running."),(0,n.kt)("p",null,"Now you can start the Nango server locally:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd packages/server\nnpm run start\n")),(0,n.kt)("p",null,"After a short while you should see a message that the server is running an listening on port 3003."),(0,n.kt)("h2",{id:"step-3-submit-your-pr"},"Step 3: Submit your PR"),(0,n.kt)("p",null,"Submit your PR with the new provider to the Nango repo. Please make sure to mention that you tested the full flow and that it works. We will review your PR asap and merge it into the main Nango repo for inclusion with the next release."),(0,n.kt)("h2",{id:"where-to-get-help"},"Where to get help"),(0,n.kt)("p",null,"If you get stuck or need help please join our ",(0,n.kt)("a",{parentName:"p",href:"https://nango.dev/slack"},"Slack community")," where the Nango contributors hang out. We will do our best to help you and get Nango to work with the OAuth flow of your provider."))}d.isMDXComponent=!0}}]);